{"version":3,"sources":["sleepingTime/timeInput.js","sleepingTime/sleepingTime.js","serviceWorker.js","index.js"],"names":["TimeInput","props","hanleTimeChange","time","console","log","setSleepTime","_d","className","onChange","this","value","format","size","allowClear","Component","SleepingTime","Date","originalTime","copiedTime","getTime","state","timeInterval","interval","timestamp","sleepTimeResult","i","plusTime","result","setTime","hours","getHours","mins","getMinutes","push","padZero","setState","sleepTime","moment","num","String","split","length","padStart","type","onClick","map","item","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wOA4BeA,E,kDAvBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAERC,gBAAkB,SAACC,GACjBC,QAAQC,IAAIF,GACPA,GACL,EAAKF,MAAMK,aAAaH,EAAKI,KANZ,E,qDAUjB,OACE,kBAAC,IAAD,CACIC,UAAU,YACVC,SAAUC,KAAKR,gBACfS,MAAOD,KAAKT,MAAMU,MAClBC,OANS,QAOTC,KAAK,QACLC,YAAY,Q,GAlBEC,a,iCC2ETC,E,kDAxEb,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IAaRK,aAAe,WAMb,IANqC,IAAvBH,EAAsB,uDAAf,IAAIc,KACnBC,EAAef,EACfgB,EAAa,IAAIF,KAAKC,EAAaE,WAFL,EAGD,EAAKC,MAAhCC,EAH4B,EAG5BA,aAAcC,EAHc,EAGdA,SAChBC,EAAYL,EAAWC,UACzBK,EAAkB,GACbC,EAAIH,EAAS,GAAIG,GAAKH,EAAS,GAAIG,IAAK,CAC/C,IAAMC,EAAWD,EAAIJ,EACfM,EAAS,IAAIX,KAAKE,EAAWU,QAAQL,EAAY,IAAOG,IACxDG,EAAQF,EAAOG,WACfC,EAAOJ,EAAOK,aACpBR,EAAgBS,KAAhB,UAAwB,EAAKC,QAAQL,GAArC,YAA+C,EAAKK,QAAQH,KAE9D,EAAKI,SAAS,CACZC,UAAWZ,EACXd,MAAO2B,IAAOpB,MA7BC,EAiCnBiB,QAAU,SAACI,GAIT,cAHWA,IAAQC,SACjBD,GAAY,IAEPA,EAAIE,MAAM,IAAIC,OAAS,EAAIH,EAAMA,EAAII,SAAS,EAAG,MAnCxD,EAAKtB,MAAQ,CACXE,SAAU,CAAC,EAAG,GACdD,aAAc,KACde,UAAW,GACX1B,MAAO,MANQ,E,gEAWjBD,KAAKJ,iB,+BA6BG,IAAD,SACsBI,KAAKW,MAA1BgB,EADD,EACCA,UADD,EACY1B,MACnB,OACE,yBAAKH,UAAU,aACb,oEACA,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CACEF,aAAcI,KAAKJ,aACnBK,MAAOD,KAAKW,MAAMV,QAEpB,kBAAC,IAAD,CACEH,UAAU,aACVoC,KAAK,UACLC,QAAS,kBAAM,EAAKvC,iBAHtB,gBASF,yBAAKE,UAAU,eACb,wDACA,yBAAKA,UAAU,kBACZ6B,EAAUS,KAAI,SAACC,EAAMC,GAAP,OACb,yBAAKC,IAAKD,GAAQD,a,GAhELhC,aCMPmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAMC,a","file":"static/js/main.5d751795.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { TimePicker } from \"antd\";\n\n\nclass TimeInput extends Component {\n  constructor(props) {\n    super(props);\n  }\n  hanleTimeChange = (time) => {\n    console.log(time)\n    if (!time) return;\n    this.props.setSleepTime(time._d);\n  };\n  render() {\n    const format = \"HH:mm\";\n    return (\n      <TimePicker\n          className=\"timeInput\"\n          onChange={this.hanleTimeChange}\n          value={this.props.value}\n          format={format}\n          size=\"large\"\n          allowClear={false}\n        />\n    );\n  }\n}\n\nexport default TimeInput;\n","import React, { Component } from \"react\";\nimport TimeInput from \"./timeInput\";\nimport { Button } from \"antd\";\nimport \"./sleepingTime.css\";\nimport moment from \"moment\";\n\nclass SleepingTime extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      interval: [3, 9], //start, end\n      timeInterval: 5400, // 90min\n      sleepTime: [],\n      value: null,\n    };\n  }\n\n  componentDidMount() {\n    this.setSleepTime();\n  }\n\n  setSleepTime = (time = new Date()) => {\n    const originalTime = time;\n    const copiedTime = new Date(originalTime.getTime());\n    const { timeInterval, interval } = this.state;\n    const timestamp = copiedTime.getTime();\n    let sleepTimeResult = [];\n    for (let i = interval[0]; i <= interval[1]; i++) {\n      const plusTime = i * timeInterval;\n      const result = new Date(copiedTime.setTime(timestamp + 1000 * plusTime));\n      const hours = result.getHours();\n      const mins = result.getMinutes();\n      sleepTimeResult.push(`${this.padZero(hours)}:${this.padZero(mins)}`);\n    }\n    this.setState({\n      sleepTime: sleepTimeResult,\n      value: moment(originalTime),\n    });\n  };\n\n  padZero = (num) => {\n    if (typeof num !== String) {\n      num = num + \"\";\n    }\n    return num.split(\"\").length > 1 ? num : num.padStart(2, \"0\");\n  };\n\n  render() {\n    const { sleepTime, value } = this.state;\n    return (\n      <div className=\"container\">\n        <h3>睡覺時間設定</h3>\n        <div className=\"time-input-wrap\">\n          <TimeInput\n            setSleepTime={this.setSleepTime}\n            value={this.state.value}\n          />\n          <Button\n            className=\"update-btn\"\n            type=\"primary\"\n            onClick={() => this.setSleepTime()}\n          >\n            update time\n          </Button>\n        </div>\n\n        <div className=\"wakeUp-wrap\">\n          <h3>起床時間</h3>\n          <div className=\"wakeUp-content\">\n            {sleepTime.map((item, index) => (\n              <div key={index}>{item}</div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SleepingTime;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport SleepingTime from './sleepingTime/sleepingTime'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <SleepingTime />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}